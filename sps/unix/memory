#pragma once

#include <sps/mm_malloc.h>

#include <algorithm>
#include <cassert>

namespace sps {
  namespace nix {
#if 1 //def __GNUG__
    template<typename T>
    using deleted_aligned_array = std::unique_ptr<T[], std::function<void(T*)> >;
    
    template<typename T>
    deleted_aligned_array<T> deleted_aligned_array_create(size_t n) {
      return deleted_aligned_array<T>((T*)_mm_malloc(n*sizeof(T),16),
                                      [](T* f)->void { _mm_free(f);});
    }
    template <class T, size_t D>
    class deleted_aligned_multi_array {
    };

    template <class T>
    class deleted_aligned_multi_array<T,1> : public std::unique_ptr<T[], std::function<void(T*)> > {
      deleted_aligned_multi_array(size_t n) :
        std::unique_ptr<T[], std::function<void(T*)> >((T*)_mm_malloc(n*sizeof(T),16),
                                                       [](T* f)->void { _mm_free(f);}) {}
    };
    
    // TODO: Does not support zero-size arrays, but works
    template <class T>
    class deleted_aligned_multi_array<T,2> {
    public:
      typedef T** pointer;
      typedef std::unique_ptr<T*, std::function<void(T**)>> deleted_unique_array;
      
      deleted_aligned_multi_array() : m(0), n(0), data() {}

      // Using this pointer works, but I get invalid read of size 8 (some times)
      deleted_aligned_multi_array(size_t m, size_t n) : m(m), n(n) {
        if (m*n > 0) {
          data = deleted_unique_array(new T*[m](),
                                        [&](T** x) {
                                          // Not required, but would be cool to use initializer
                                          if (sps::msize(x) > 0) {
                                            _mm_free(&(x[0][0]));
                                          }
                                          delete[] x;});
        }
        else {
          data.reset();
        }

        // Allocate
        if (m*n > 0) {
          data.get()[0] = (T*) _mm_malloc(m*n*sizeof(T),16);

          // Row pointers. First pointer may screw up de-allocation.
          for (size_t iRow = 1; iRow < m; iRow++) {
            (data.get())[iRow] = &(data.get()[0][iRow*n]);
          }
        }
      }
      
      deleted_aligned_multi_array(deleted_aligned_multi_array&& other) : m(std::move(other.m)), n(std::move(other.n)), data(std::move(other.data)) { }

      // Dangerous
      deleted_aligned_multi_array& operator=( deleted_aligned_multi_array&& other ) 
      {
        if (this != &other) {
          this->data = std::move( other.data );
          this->m    = std::move( other.m );
          this->n    = std::move( other.n );
        }
        return *this;
      }

      T& operator()(size_t i, size_t j) {
        return this->data.get()[0][i*n + j];
      }
      
      T* operator[](size_t m) {
        return &(data.get()[m][0]);
      }
      
      const T* operator[](size_t m) const {
        return data.get()[m];
      }
      
      pointer get() {
        return data.get();
      }

      const pointer get2() const {
        return data.get();
      }
      
      void reset(pointer __p = pointer()) {
        data.reset(__p);
      }

      template<typename _Up>
      void reset(_Up) = delete;
      
    private:
      deleted_aligned_multi_array(const deleted_aligned_multi_array& other) = delete;
      deleted_aligned_multi_array& operator=( const deleted_aligned_multi_array& a ) = delete;

    public:
      size_t m;                   ///<Number of rows
      size_t n;                   ///<Number of columns
      deleted_unique_array data;  ///<Data
    };

    // Work-around to partially specialize a function (multiple dimensions)
    template <class T, size_t I>
    inline typename std::enable_if<I==2, deleted_aligned_multi_array<T,2> >::type
    deleted_aligned_multi_array_create(size_t m, size_t n)
    {
      return deleted_aligned_multi_array<T,2>(m,n);
    }
#endif
  }
}

/* Local variables: */
/* mode: c++ */
/* indent-tabs-mode: nil */
/* tab-width: 2 */
/* c-basic-offset: 2 */
/* End: */
