<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="smath_8hpp" kind="file">
    <compoundname>smath.hpp</compoundname>
    <includes local="no">sps/cenv.h</includes>
    <includes local="no">sps/sps_export.h</includes>
    <includes local="no">sps/math.h</includes>
    <includes local="no">sps/smath_types.hpp</includes>
    <includes local="no">iostream</includes>
    <includedby refid="fnm__types_8hpp" local="no">fnm/fnm_types.hpp</includedby>
    <includedby refid="FnmMath_8hpp" local="no">fnm/FnmMath.hpp</includedby>
    <includedby refid="FnmSIMD_8hpp" local="no">fnm/FnmSIMD.hpp</includedby>
    <incdepgraph>
      <node id="252">
        <label>sps/cenv.h</label>
      </node>
      <node id="251">
        <label>sps/smath.hpp</label>
        <link refid="smath.hpp"/>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
      </node>
      <node id="255">
        <label>sps/smath_types.hpp</label>
      </node>
      <node id="256">
        <label>iostream</label>
      </node>
      <node id="253">
        <label>sps/sps_export.h</label>
      </node>
      <node id="254">
        <label>sps/math.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="262">
        <label>fnm/FnmSIMD.hpp</label>
        <link refid="FnmSIMD_8hpp"/>
      </node>
      <node id="261">
        <label>fnm/fnm_data.hpp</label>
        <link refid="fnm__data_8hpp"/>
        <childnode refid="260" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>fnm/fnm.hpp</label>
        <link refid="fnm_8hpp"/>
        <childnode refid="260" relation="include">
        </childnode>
      </node>
      <node id="257">
        <label>sps/smath.hpp</label>
        <link refid="smath.hpp"/>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
      </node>
      <node id="263">
        <label>fnm/FnmMath.hpp</label>
        <link refid="FnmMath_8hpp"/>
      </node>
      <node id="258">
        <label>fnm/fnm_types.hpp</label>
        <link refid="fnm__types_8hpp"/>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
      </node>
      <node id="260">
        <label>fnm/fnm_calc.hpp</label>
        <link refid="fnm__calc_8hpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacesps">sps</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int signum</definition>
        <argsstring>(T x, std::false_type is_signed)</argsstring>
        <name>signum</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::false_type</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signum function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_signed</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/sps/smath.hpp" line="44" column="1" bodyfile="/home/jmh/github/sofus/sps/smath.hpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="smath_8hpp_1a6ad435c3cf741e6cf8d6c2ed5c272210" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int signum</definition>
        <argsstring>(T x, std::true_type is_signed)</argsstring>
        <name>signum</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::true_type</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signum function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_signed</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/sps/smath.hpp" line="57" column="1" bodyfile="/home/jmh/github/sofus/sps/smath.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="smath_8hpp_1a4761435ab54306df78fcba4fd156e3fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int signum</definition>
        <argsstring>(T x)</argsstring>
        <name>signum</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signum function</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/sps/smath.hpp" line="70" column="1" bodyfile="/home/jmh/github/sofus/sps/smath.hpp" bodystart="70" bodyend="73"/>
        <references refid="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" compoundref="smath_8hpp" startline="44" endline="47">signum</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Simple math. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jens Munk Hansen <ulink url="mailto:jens.munk.hansen@gmail.com">jens.munk.hansen@gmail.com</ulink> </para></simplesect>
<simplesect kind="date"><para>Sat Oct 10 18:41:43 2015 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sps/cenv.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sps/sps_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sps/math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sps/smath_types.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>eventually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">T<sp/><ref refid="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" kindref="member">signum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T((T(0)<sp/>&lt;<sp/>x)<sp/>-<sp/>(x<sp/>&lt;<sp/>T(0)));</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr</highlight></codeline>
<codeline lineno="44" refid="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" kindref="member">signum</ref>(T<sp/>x,<sp/>std::false_type<sp/>is_signed)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(0)<sp/>&lt;<sp/>x;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr</highlight></codeline>
<codeline lineno="57" refid="smath_8hpp_1a6ad435c3cf741e6cf8d6c2ed5c272210" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" kindref="member">signum</ref>(T<sp/>x,<sp/>std::true_type<sp/>is_signed)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(T(0)<sp/>&lt;<sp/>x)<sp/>-<sp/>(x<sp/>&lt;<sp/>T(0));</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr</highlight></codeline>
<codeline lineno="70" refid="smath_8hpp_1a4761435ab54306df78fcba4fd156e3fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" kindref="member">signum</ref>(T<sp/>x)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="smath_8hpp_1ab50269cb12c04295c021f7ce24108750" kindref="member">signum</ref>(x,<sp/>std::is_signed&lt;T&gt;());</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesps" kindref="compound">sps</ref><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="89" refid="namespacesps_1a5ec8f80252d9d984138f014c822d27d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacesps_1a5ec8f80252d9d984138f014c822d27d0" kindref="member">dist_point_to_point</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>b)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(SQUARE(a[0]-b[0])+SQUARE(a[1]-b[1])+SQUARE(a[2]-b[2]));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="103" refid="namespacesps_1a49b7bc999932466978a16485e1c6a98b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacesps_1a49b7bc999932466978a16485e1c6a98b" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a[0]*b[0]<sp/>+<sp/>a[1]*b[1]<sp/>+<sp/>a[2]*b[2];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="117" refid="namespacesps_1a634cb0a93cc6f57c45c79f7df04c8752" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/><ref refid="namespacesps_1a634cb0a93cc6f57c45c79f7df04c8752" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>point_t&lt;T&gt;<sp/>c;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0]<sp/>=<sp/>a[0]-b[0];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1]<sp/>=<sp/>a[1]-b[1];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>c[2]<sp/>=<sp/>a[2]-b[2];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="136" refid="namespacesps_1abcd3fabeb60a10d9ad05fc027c789e9e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/><ref refid="namespacesps_1abcd3fabeb60a10d9ad05fc027c789e9e" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>point_t&lt;T&gt;<sp/>c;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0]<sp/>=<sp/>a[0]<sp/>+<sp/>b[0];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1]<sp/>=<sp/>a[1]<sp/>+<sp/>b[1];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>c[2]<sp/>=<sp/>a[2]<sp/>+<sp/>b[2];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="154" refid="namespacesps_1a04c7b1f1585fda60325b43c35937ee96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/><ref refid="namespacesps_1a04c7b1f1585fda60325b43c35937ee96" kindref="member">cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>point_t&lt;T&gt;<sp/>c;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0]<sp/>=<sp/>a[1]*b[2]<sp/>-<sp/>b[1]*a[2];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1]<sp/>=<sp/>a[2]*b[0]<sp/>-<sp/>b[2]*a[0];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>c[2]<sp/>=<sp/>a[0]*b[1]<sp/>-<sp/>b[0]*a[1];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="172" refid="namespacesps_1a22175b6c56edce28e060aaddb0443215" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/><ref refid="namespacesps_1a22175b6c56edce28e060aaddb0443215" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;b)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>point_t&lt;T&gt;<sp/>c;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>c[0]<sp/>=<sp/>a*b[0];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>c[1]<sp/>=<sp/>a*b[1];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>c[2]<sp/>=<sp/>a*b[2];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="189" refid="namespacesps_1ac8e58e03b1ed250e4dd83774401fb670" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacesps_1ac8e58e03b1ed250e4dd83774401fb670" kindref="member">norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;<sp/>&amp;a)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(<ref refid="namespacesps_1a49b7bc999932466978a16485e1c6a98b" kindref="member">dot</ref>(a,a));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="204" refid="namespacesps_1a55c6fe1c1fdf3c5a3e7b354dae205840" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacesps_1a55c6fe1c1fdf3c5a3e7b354dae205840" kindref="member">dist_to_line</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>pointOnLine,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesps_1ac8e58e03b1ed250e4dd83774401fb670" kindref="member">norm</ref>(<ref refid="namespacesps_1a04c7b1f1585fda60325b43c35937ee96" kindref="member">cross</ref>(direction,<sp/>point<sp/>-<sp/>pointOnLine));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="220" refid="namespacesps_1a6d00662f3287276d877ae3e1e10b9c6e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespacesps_1a6d00662f3287276d877ae3e1e10b9c6e" kindref="member">sgn_dist_to_plane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>pointOnPlane,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>point_t&lt;T&gt;&amp;<sp/>unitNormal)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesps_1a49b7bc999932466978a16485e1c6a98b" kindref="member">dot</ref>((point<sp/>-<sp/>pointOnPlane),unitNormal);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="235" refid="namespacesps_1a4cbe6332a0c07b3bb2e80bb8048d6f9e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;<sp/><ref refid="namespacesps_1a4cbe6332a0c07b3bb2e80bb8048d6f9e" kindref="member">clamp_vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;<sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::bbox_t&lt;T&gt;<sp/>&amp;box)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>clamped;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>clamped[0]<sp/>=<sp/>(point[0]<sp/>&lt;<sp/>box.min[0])<sp/>?<sp/>box.min[0]<sp/>:<sp/>(point[0]<sp/>&gt;<sp/>box.max[0])<sp/>?<sp/>box.max[0]<sp/>:<sp/>point[0];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>clamped[1]<sp/>=<sp/>(point[1]<sp/>&lt;<sp/>box.min[1])<sp/>?<sp/>box.min[1]<sp/>:<sp/>(point[1]<sp/>&gt;<sp/>box.max[1])<sp/>?<sp/>box.max[1]<sp/>:<sp/>point[1];</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>clamped[2]<sp/>=<sp/>(point[2]<sp/>&lt;<sp/>box.min[2])<sp/>?<sp/>box.min[2]<sp/>:<sp/>(point[2]<sp/>&gt;<sp/>box.max[2])<sp/>?<sp/>box.max[2]<sp/>:<sp/>point[2];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clamped;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="253" refid="namespacesps_1a49f2545f74f9a6cf30e04d428badaf27" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;<sp/><ref refid="namespacesps_1a49f2545f74f9a6cf30e04d428badaf27" kindref="member">nearest_point_on_bbox</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;<sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::bbox_t&lt;T&gt;<sp/>&amp;box)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesps_1a4cbe6332a0c07b3bb2e80bb8048d6f9e" kindref="member">clamp_vector</ref>(point,box);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="267" refid="namespacesps_1a5ba962916e1ba5c3114e45f153d80081" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;<sp/><ref refid="namespacesps_1a5ba962916e1ba5c3114e45f153d80081" kindref="member">farthest_point_on_bbox</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;<sp/>&amp;point,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::bbox_t&lt;T&gt;<sp/>&amp;box)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>farthest;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>farthest[0]<sp/>=<sp/>(point[0]<sp/>&lt;<sp/>box.min[0])<sp/>?<sp/>box.max[0]<sp/>:</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(point[0]<sp/>&gt;<sp/>box.max[0])<sp/>?<sp/>box.min[0]<sp/>:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(point[0]<sp/>-<sp/>box.min[0])<sp/>&gt;<sp/>(box.max[0]<sp/>-<sp/>point[0])<sp/>?<sp/>box.min[0]<sp/>:<sp/>box.max[0];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>farthest[1]<sp/>=<sp/>(point[1]<sp/>&lt;<sp/>box.min[1])<sp/>?<sp/>box.max[1]<sp/>:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(point[1]<sp/>&gt;<sp/>box.max[1])<sp/>?<sp/>box.min[1]<sp/>:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(point[1]<sp/>-<sp/>box.min[1])<sp/>&gt;<sp/>(box.max[1]<sp/>-<sp/>point[1])<sp/>?<sp/>box.min[1]<sp/>:<sp/>box.max[1];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>farthest[2]<sp/>=<sp/>(point[2]<sp/>&lt;<sp/>box.min[2])<sp/>?<sp/>box.max[2]<sp/>:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(point[2]<sp/>&gt;<sp/>box.max[2])<sp/>?<sp/>box.min[2]<sp/>:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(point[2]<sp/>-<sp/>box.min[2])<sp/>&gt;<sp/>(box.max[2]<sp/>-<sp/>point[2])<sp/>?<sp/>box.min[2]<sp/>:<sp/>box.max[2];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>farthest;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="284" refid="namespacesps_1a00bcbe34e177c2a5ac0ec59f89998db2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesps_1a00bcbe34e177c2a5ac0ec59f89998db2" kindref="member">dists_most_distant_and_closest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::bbox_t&lt;T&gt;<sp/>&amp;box0,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::bbox_t&lt;T&gt;<sp/>&amp;box1,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>distNear,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>distFar)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>boundaries[6];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>border_points0[8];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>border_points1[8];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;boundaries[0],&amp;box0.min[0],3*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;boundaries[3],&amp;box0.max[0],3*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>2<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>2<sp/>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/>2<sp/>;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_points0[i*4+j*2+k][0]<sp/>=<sp/>boundaries[i*3];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_points0[i*4+j*2+k][1]<sp/>=<sp/>boundaries[1+j*3];<sp/></highlight><highlight class="comment">//<sp/>1,4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_points0[i*4+j*2+k][2]<sp/>=<sp/>boundaries[2+k*3];<sp/></highlight><highlight class="comment">//<sp/>2,5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;boundaries[0],&amp;box1.min[0],3*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;boundaries[3],&amp;box1.max[0],3*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>2<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0<sp/>;<sp/>j<sp/>&lt;<sp/>2<sp/>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0<sp/>;<sp/>k<sp/>&lt;<sp/>2<sp/>;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_points1[i*4+j*2+k][0]<sp/>=<sp/>boundaries[i*3];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_points1[i*4+j*2+k][1]<sp/>=<sp/>boundaries[1+j*3];<sp/></highlight><highlight class="comment">//<sp/>1,4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_points1[i*4+j*2+k][2]<sp/>=<sp/>boundaries[2+k*3];<sp/></highlight><highlight class="comment">//<sp/>2,5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>*distNear<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>*distFar<sp/><sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iBorderPoint<sp/>=<sp/>0<sp/>;<sp/>iBorderPoint<sp/>&lt;<sp/>8<sp/>;<sp/>iBorderPoint++)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>corner0<sp/>=<sp/>border_points0[iBorderPoint];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>near0<sp/>=<sp/><ref refid="namespacesps_1a49f2545f74f9a6cf30e04d428badaf27" kindref="member">nearest_point_on_bbox</ref>(corner0,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>jBorderPoint<sp/>=<sp/>0<sp/>;<sp/>jBorderPoint<sp/>&lt;<sp/>8<sp/>;<sp/>jBorderPoint++)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>corner1<sp/>=<sp/>border_points1[jBorderPoint];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*distFar<sp/>=<sp/>std::max&lt;T&gt;(*distFar,<sp/>dist_point_to_point&lt;T&gt;(corner0,corner1));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sps::point_t&lt;T&gt;<sp/>near1<sp/>=<sp/><ref refid="namespacesps_1a49f2545f74f9a6cf30e04d428badaf27" kindref="member">nearest_point_on_bbox</ref>(near0,box0);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*distNear<sp/>=<sp/>std::min&lt;T&gt;(*distNear,<sp/>dist_point_to_point&lt;T&gt;(near0,near1));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SPS_EXPORT<sp/>point_t&lt;float&gt;;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SPS_EXPORT<sp/>point_t&lt;double&gt;;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SPS_EXPORT<sp/>euler_t&lt;float&gt;;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SPS_EXPORT<sp/>euler_t&lt;double&gt;;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SPS_EXPORT<sp/><ref refid="namespacesps_1af6fa4d5ae05cae25226c8f79d864a722" kindref="member">basis_vectors</ref>(sps::point_t&lt;T&gt;&amp;<sp/>output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::euler_t&lt;T&gt;&amp;<sp/>euler,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SPS_EXPORT<sp/><ref refid="namespacesps_1af6fa4d5ae05cae25226c8f79d864a722" kindref="member">basis_vectors</ref>(T*<sp/>vec0,<sp/>T*<sp/>vec1,<sp/>T*<sp/>vec2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::euler_t&lt;T&gt;&amp;<sp/>euler);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="377" refid="namespacesps_1a1f6bfb41fd1c17ffbe559cb6c9838487" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/>const<sp/>point_t&lt;T&gt;&amp;<sp/>point)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>y:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point[1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>z:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>point[2]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="comment">//<sp/>TODO:<sp/>Consider<sp/>using<sp/>aligned<sp/>memory<sp/>(only),<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="390"><highlight class="comment">typedef<sp/>float<sp/>f4<sp/>__attribute__((vector_size(16)));</highlight></codeline>
<codeline lineno="391"><highlight class="comment">typedef<sp/>union<sp/>{<sp/>f4<sp/>v;<sp/>float<sp/>f[4];<sp/>}<sp/>simdfu;</highlight></codeline>
<codeline lineno="392"><highlight class="comment"></highlight></codeline>
<codeline lineno="393"><highlight class="comment">void<sp/>vecadd(f4<sp/>*<sp/>restrict<sp/>a,<sp/>f4<sp/>*<sp/>restrict<sp/>b,<sp/>f4<sp/>*<sp/>restrict<sp/>c);</highlight></codeline>
<codeline lineno="394"><highlight class="comment"></highlight></codeline>
<codeline lineno="395"><highlight class="comment">float<sp/>a[16]<sp/>__attribute__((aligned(16)));</highlight></codeline>
<codeline lineno="396"><highlight class="comment">float<sp/>b[16]<sp/>__attribute__((aligned(16)));</highlight></codeline>
<codeline lineno="397"><highlight class="comment">float<sp/>c[16]<sp/>__attribute__((aligned(16)));</highlight></codeline>
<codeline lineno="398"><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment">int<sp/>main()</highlight></codeline>
<codeline lineno="400"><highlight class="comment">{</highlight></codeline>
<codeline lineno="401"><highlight class="comment">a<sp/>=<sp/>__builtin_assume_aligned<sp/>(a,<sp/>8);</highlight></codeline>
<codeline lineno="402"><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/>vecadd((f4<sp/>*)<sp/>a,<sp/>(f4<sp/>*)<sp/>b,<sp/>(f4<sp/>*)<sp/>c);</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="comment">}</highlight></codeline>
<codeline lineno="406"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>variables:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>indent-tab-mode:<sp/>nil<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tab-width:<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>c-basic-offset:<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/jmh/github/sofus/sps/smath.hpp"/>
  </compounddef>
</doxygen>
