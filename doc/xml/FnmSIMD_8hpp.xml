<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="FnmSIMD_8hpp" kind="file">
    <compoundname>FnmSIMD.hpp</compoundname>
    <includes refid="config_8h" local="no">fnm/config.h</includes>
    <includes local="no">sps/cenv.h</includes>
    <includes refid="smath_8hpp" local="no">sps/smath.hpp</includes>
    <includes refid="fnm__types_8hpp" local="no">fnm/fnm_types.hpp</includes>
    <includes local="no">sps/trigintrin.h</includes>
    <includes local="no">complex</includes>
    <incdepgraph>
      <node id="231">
        <label>fnm/fnm_export.h</label>
        <link refid="fnm__export_8h"/>
      </node>
      <node id="233">
        <label>sps/trigintrin.h</label>
      </node>
      <node id="222">
        <label>fnm/FnmSIMD.hpp</label>
        <link refid="FnmSIMD.hpp"/>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
      </node>
      <node id="224">
        <label>sps/cenv.h</label>
      </node>
      <node id="225">
        <label>sps/smath.hpp</label>
        <link refid="smath_8hpp"/>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
      </node>
      <node id="232">
        <label>sps/memory</label>
      </node>
      <node id="228">
        <label>sps/smath_types.hpp</label>
      </node>
      <node id="223">
        <label>fnm/config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="229">
        <label>iostream</label>
      </node>
      <node id="226">
        <label>sps/sps_export.h</label>
      </node>
      <node id="234">
        <label>complex</label>
      </node>
      <node id="227">
        <label>sps/math.h</label>
      </node>
      <node id="230">
        <label>fnm/fnm_types.hpp</label>
        <link refid="fnm__types_8hpp"/>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="FnmSIMD_8hpp_1aaf68820097524bc6a39eb9b5c95836e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>STATIC_INLINE_BEGIN std::complex&lt; T &gt;</type>
        <definition>STATIC_INLINE_BEGIN std::complex&lt;T&gt; CalcHzVecGL</definition>
        <argsstring>(const T &amp;s, const T &amp;l, const T &amp;z, const T &amp;k, const T *us, const T *uweights, const size_t nUs, const T *vs, const T *vweights, const size_t nVs) STATIC_INLINE_END</argsstring>
        <name>CalcHzVecGL</name>
        <param>
          <type>const T &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1a15656136d30b6df89250c4d3ed1c3914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>STATIC_INLINE_BEGIN std::complex&lt; T &gt;</type>
        <definition>STATIC_INLINE_BEGIN std::complex&lt;T&gt; CalcHzAll</definition>
        <argsstring>(const sps::element_t&lt; T &gt; &amp;element, const sps::point_t&lt; T &gt; &amp;projection, const T &amp;k, const T *us, const T *uweights, const size_t nUs, const T *vs, const T *vweights, const size_t nVs) STATIC_INLINE_END</argsstring>
        <name>CalcHzAll</name>
        <param>
          <type>const sps::element_t&lt; T &gt; &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sps::point_t&lt; T &gt; &amp;</type>
          <declname>projection</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1a8c2f4b3432e306eb19be78d6e8636199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>STATIC_INLINE_BEGIN std::complex&lt; T &gt;</type>
        <definition>STATIC_INLINE_BEGIN std::complex&lt;T&gt; CalcHzFast</definition>
        <argsstring>(const sps::element_t&lt; T &gt; &amp;element, const sps::point_t&lt; T &gt; &amp;projection, const T &amp;k, const T *us, const T *uweights, const size_t nUs, const T *vs, const T *vweights, const size_t nVs) STATIC_INLINE_END</argsstring>
        <name>CalcHzFast</name>
        <param>
          <type>const sps::element_t&lt; T &gt; &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sps::point_t&lt; T &gt; &amp;</type>
          <declname>projection</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integral with (nUs x nVs) points inside the region of integration</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>projection</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>us</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uweights</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nUs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vweights</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nVs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1ada7ae13154936fbf393215429b6a8e67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; float &gt;</type>
        <definition>std::complex&lt;float&gt; CalcHzVecGL</definition>
        <argsstring>(const float &amp;s, const float &amp;l, const float &amp;z, const float &amp;k, const float *us, const float *uweights, const size_t nUs, const float *vs, const float *vweights, const size_t nVs)</argsstring>
        <name>CalcHzVecGL</name>
        <param>
          <type>const float &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="75" column="1" bodyfile="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" bodystart="75" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1a2afa33d436256506e69d6afd35552e58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; float &gt;</type>
        <definition>std::complex&lt;float&gt; CalcHzAll</definition>
        <argsstring>(const sps::element_t&lt; float &gt; &amp;element, const sps::point_t&lt; float &gt; &amp;projection, const float &amp;k, const float *us, const float *uweights, const size_t nUs, const float *vs, const float *vweights, const size_t nVs)</argsstring>
        <name>CalcHzAll</name>
        <param>
          <type>const sps::element_t&lt; float &gt; &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sps::point_t&lt; float &gt; &amp;</type>
          <declname>projection</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="185" column="1" bodyfile="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" bodystart="185" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1af714277fdda0c36cc35b950fc5178bc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; float &gt;</type>
        <definition>std::complex&lt;float&gt; CalcHzFast</definition>
        <argsstring>(const sps::element_t&lt; float &gt; &amp;element, const sps::point_t&lt; float &gt; &amp;projection, const float &amp;k, const float *us, const float *uweights, const size_t nUs, const float *vs, const float *vweights, const size_t nVs)</argsstring>
        <name>CalcHzFast</name>
        <param>
          <type>const sps::element_t&lt; float &gt; &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sps::point_t&lt; float &gt; &amp;</type>
          <declname>projection</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="329" column="1" bodyfile="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" bodystart="329" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1ad78992ef7c633408569afdc5bf9c1959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; CalcHzFast</definition>
        <argsstring>(const sps::element_t&lt; double &gt; &amp;element, const sps::point_t&lt; double &gt; &amp;projection, const double &amp;k, const double *us, const double *uweights, const size_t nUs, const double *vs, const double *vweights, const size_t nVs)</argsstring>
        <name>CalcHzFast</name>
        <param>
          <type>const sps::element_t&lt; double &gt; &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sps::point_t&lt; double &gt; &amp;</type>
          <declname>projection</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="597" column="1" bodyfile="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" bodystart="597" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1a483b42c4d0c798ba9bde31c0be682edd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; CalcHzVecGL</definition>
        <argsstring>(const double &amp;s, const double &amp;l, const double &amp;z, const double &amp;k, const double *us, const double *uweights, const size_t nUs, const double *vs, const double *vweights, const size_t nVs)</argsstring>
        <name>CalcHzVecGL</name>
        <param>
          <type>const double &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="978" column="1" bodyfile="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" bodystart="978" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="FnmSIMD_8hpp_1a703837733eadf893395370bc38b77060" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; CalcHzAll</definition>
        <argsstring>(const sps::element_t&lt; double &gt; &amp;element, const sps::point_t&lt; double &gt; &amp;projection, const double &amp;k, const double *us, const double *uweights, const size_t nUs, const double *vs, const double *vweights, const size_t nVs)</argsstring>
        <name>CalcHzAll</name>
        <param>
          <type>const sps::element_t&lt; double &gt; &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sps::point_t&lt; double &gt; &amp;</type>
          <declname>projection</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>us</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>vs</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" line="995" column="1" bodyfile="/home/jmh/github/sofus/fnm/FnmSIMD.hpp" bodystart="995" bodyend="1009"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jens Munk Hansen <ulink url="mailto:jens.munk.hansen@gmail.com">jens.munk.hansen@gmail.com</ulink> </para></simplesect>
<simplesect kind="date"><para>Thu Jun 9 06:01:12 2016 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="config_8h" kindref="compound">fnm/config.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sps/cenv.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="smath_8hpp" kindref="compound">sps/smath.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fnm__types_8hpp" kindref="compound">fnm/fnm_types.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sps/trigintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">STATIC_INLINE_BEGIN<sp/>std::complex&lt;T&gt;<sp/><ref refid="FnmSIMD_8hpp_1aaf68820097524bc6a39eb9b5c95836e4" kindref="member">CalcHzVecGL</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>s,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>l,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>z,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>k,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>us,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>uweights,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>vs,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>vweights,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)<sp/>STATIC_INLINE_END;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Non-reduced<sp/>integral,<sp/>but<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">STATIC_INLINE_BEGIN<sp/>std::complex&lt;T&gt;<sp/><ref refid="FnmSIMD_8hpp_1a15656136d30b6df89250c4d3ed1c3914" kindref="member">CalcHzAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::element_t&lt;T&gt;&amp;<sp/>element,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;&amp;<sp/>projection,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>k,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>us,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>uweights,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>vs,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>vweights,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)<sp/>STATIC_INLINE_END;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">STATIC_INLINE_BEGIN<sp/>std::complex&lt;T&gt;<sp/><ref refid="FnmSIMD_8hpp_1a8c2f4b3432e306eb19be78d6e8636199" kindref="member">CalcHzFast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::element_t&lt;T&gt;&amp;<sp/>element,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;T&gt;&amp;<sp/>projection,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>k,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>us,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>uweights,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>vs,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>vweights,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)<sp/>STATIC_INLINE_END;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">std::complex&lt;float&gt;</highlight></codeline>
<codeline lineno="75" refid="FnmSIMD_8hpp_1ada7ae13154936fbf393215429b6a8e67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="FnmSIMD_8hpp_1aaf68820097524bc6a39eb9b5c95836e4" kindref="member">CalcHzVecGL</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>s,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>l,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>z,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>k,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>us,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>uweights,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>vs,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>vweights,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>carg<sp/>=<sp/>_mm_set1_ps(cos(-k*z));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>sarg<sp/>=<sp/>_mm_set1_ps(sin(-k*z));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>l_2<sp/>=<sp/>_mm_mul_ps(_mm_set1_ps(l),_m_half_ps);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>s_2<sp/>=<sp/>_mm_mul_ps(_mm_set1_ps(s),_m_half_ps);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>z2<sp/>=<sp/>_mm_set1_ps(SQUARE(z));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>l2<sp/>=<sp/>_mm_set1_ps(SQUARE(l));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>s2<sp/>=<sp/>_mm_set1_ps(SQUARE(s));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>__m128<sp/>intWreal<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>__m128<sp/>intWimag<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>__m128<sp/>real,<sp/>imag;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iu<sp/>=<sp/>0<sp/>;<sp/>iu<sp/>&lt;<sp/>4*((nUs+3)/4)<sp/>;<sp/>iu+=4)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ls<sp/><sp/>=<sp/>_mm_add_ps(_mm_mul_ps(l_2,_mm_load_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;us[iu])),l_2);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ls2<sp/>=<sp/>_mm_square_ps(ls);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>argw<sp/>=<sp/>_mm_mul_ps(_mm_set1_ps(-k),_mm_sqrt_ps(_mm_add_ps(_mm_add_ps(ls2,z2),s2)));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>cargw,<sp/>sargw;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_ps(argw,<sp/>&amp;sargw,<sp/>&amp;cargw);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>vec_uweight<sp/>=<sp/>_mm_load_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;uweights[iu]);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>denom<sp/>=<sp/>_mm_add_ps(ls2,s2);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_ps(denom);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(vec_uweight,_mm_sub_ps(cargw,<sp/>carg)),rcp_denom);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(vec_uweight,_mm_sub_ps(sargw,<sp/>sarg)),rcp_denom);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>intWreal<sp/>=<sp/>_mm_add_ps(intWreal,<sp/>real);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>intWimag<sp/>=<sp/>_mm_add_ps(intWimag,<sp/>imag);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>__m128<sp/>rcp_denom1<sp/>=<sp/>_mm_rcp_ps(_mm_mul_ps(_m_2pi_ps,_mm_set1_ps(k)));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>intWreal<sp/>=<sp/>_mm_mul_ps(intWreal,<sp/>_mm_mul_ps(_mm_mul_ps(l_2,_mm_set1_ps(s)),<sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>intWimag<sp/>=<sp/>_mm_mul_ps(intWimag,<sp/>_mm_mul_ps(_mm_mul_ps(l_2,_mm_set1_ps(s)),<sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>integral<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>std::complex&lt;float&gt;<sp/>intH<sp/>=<sp/>std::complex&lt;float&gt;(float(0.0),float(0.0));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>__m128<sp/>intHreal<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>__m128<sp/>intHimag<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0<sp/>;<sp/>iv<sp/>&lt;<sp/>4*((nVs+3)/4)<sp/>;<sp/>iv+=4)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ss<sp/><sp/>=<sp/>_mm_add_ps(_mm_mul_ps(s_2,_mm_load_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;vs[iv])),s_2);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ss2<sp/>=<sp/>_mm_square_ps(ss);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>argh<sp/>=<sp/>_mm_mul_ps(_mm_set1_ps(-k),_mm_sqrt_ps(_mm_add_ps(_mm_add_ps(ss2,z2),l2)));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>cargh,<sp/>sargh;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_ps(argh,<sp/>&amp;sargh,<sp/>&amp;cargh);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>vec_vweight<sp/>=<sp/>_mm_load_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;vweights[iv]);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_ps(_mm_add_ps(ss2,l2));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(vec_vweight,_mm_sub_ps(cargh,<sp/>carg)),rcp_denom);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(vec_vweight,_mm_sub_ps(sargh,<sp/>sarg)),rcp_denom);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_ps(intHreal,<sp/>real);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_ps(intHimag,<sp/>imag);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_mul_ps(intHreal,<sp/>_mm_mul_ps(_mm_mul_ps(s_2,_mm_set1_ps(l)),<sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_mul_ps(intHimag,<sp/>_mm_mul_ps(_mm_mul_ps(s_2,_mm_set1_ps(l)),<sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_ps(intHreal,intWreal);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_ps(intHimag,intWimag);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>-i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>__m128<sp/>tmp<sp/>=<sp/>intHreal;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>intHimag;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_neg_ps(tmp);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>4<sp/>partial<sp/>integrals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>__m128<sp/>result<sp/>=<sp/>_mm_dp_ps(_m_one_ps,intHreal,0xF1);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>_mm_add_ps(result,_mm_dp_ps(_m_one_ps,intHimag,0xF2));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>ALIGN16_BEGIN<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>results[4]<sp/>ALIGN16_END;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>_mm_store_ps(results,result);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>intH.real(results[0]);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>intH.imag(results[1]);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intH;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">std::complex&lt;float&gt;</highlight></codeline>
<codeline lineno="185" refid="FnmSIMD_8hpp_1a2afa33d436256506e69d6afd35552e58" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="FnmSIMD_8hpp_1a15656136d30b6df89250c4d3ed1c3914" kindref="member">CalcHzAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::element_t&lt;float&gt;&amp;<sp/>element,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;float&gt;&amp;<sp/>projection,<sp/></highlight><highlight class="comment">//<sp/>Consider<sp/>4<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>k,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>us,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>uweights,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>vs,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>vweights,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>std::complex&lt;float&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>projection[2];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s0<sp/>=<sp/>fabs(projection[1])<sp/>+<sp/>element.hh;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>element.hh<sp/>-<sp/>fabs(projection[1]);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l0<sp/>=<sp/>fabs(projection[0])<sp/>+<sp/>element.hw;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l1<sp/>=<sp/>element.hw<sp/>-<sp/>fabs(projection[0]);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>__m128<sp/>s<sp/>=<sp/>_mm_set_ps(s2,s2,s0,s0);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>__m128<sp/>l<sp/>=<sp/>_mm_set_ps(l1,l0,l1,l0);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>vec_s<sp/>=<sp/>_mm_fabs_ps(s);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>vec_l<sp/>=<sp/>_mm_fabs_ps(l);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>cargz<sp/>=<sp/>_mm_set1_ps(cos(-k*z));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>sargz<sp/>=<sp/>_mm_set1_ps(sin(-k*z));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>vec_l_2<sp/>=<sp/>_mm_mul_ps(vec_l,_m_half_ps);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>vec_s_2<sp/>=<sp/>_mm_mul_ps(vec_s,_m_half_ps);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>z2<sp/>=<sp/>_mm_set1_ps(SQUARE(z));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>vec_l2<sp/>=<sp/>_mm_square_ps(vec_l);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>vec_s2<sp/>=<sp/>_mm_square_ps(vec_s);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>__m128<sp/>real,<sp/>imag;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>__m128<sp/>intWreal<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>__m128<sp/>intWimag<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iu<sp/>=<sp/>0<sp/>;<sp/>iu<sp/>&lt;<sp/>nUs<sp/>;<sp/>iu++)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>us1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;us[iu]);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>uweights1<sp/>=<sp/>_mm_load1_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;uweights[iu]);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ls<sp/><sp/>=<sp/>_mm_add_ps(_mm_mul_ps(vec_l_2,us1),vec_l_2);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ls2<sp/>=<sp/>_mm_square_ps(ls);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>argw<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_set1_ps(-k),</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_ps(</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ls2,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2),</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_s2)));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>cargw,<sp/>sargw;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_ps(argw,<sp/>&amp;sargw,<sp/>&amp;cargw);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_ps(_mm_add_ps(ls2,vec_s2));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(uweights1,_mm_sub_ps(cargw,<sp/>cargz)),rcp_denom);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(uweights1,_mm_sub_ps(sargw,<sp/>sargz)),rcp_denom);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>intWreal<sp/>=<sp/>_mm_add_ps(intWreal,<sp/>real);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>intWimag<sp/>=<sp/>_mm_add_ps(intWimag,<sp/>imag);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>__m128<sp/>rcp_denom1<sp/>=<sp/>_mm_rcp_ps(_mm_mul_ps(_m_2pi_ps,_mm_set1_ps(k)));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>intWreal<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intWreal,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_l_2,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_s),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>intWimag<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intWimag,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_l_2,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_s),</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>__m128<sp/>intHreal<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>__m128<sp/>intHimag<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0<sp/>;<sp/>iv<sp/>&lt;<sp/>nVs<sp/>;<sp/>iv++)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>vs1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;vs[iv]);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>vweights1<sp/>=<sp/>_mm_load1_ps((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)&amp;vweights[iv]);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ss<sp/><sp/>=<sp/>_mm_add_ps(_mm_mul_ps(vec_s_2,vs1),vec_s_2);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ss2<sp/>=<sp/>_mm_square_ps(ss);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>argh<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_set1_ps(-k),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_ps(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss2,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2),</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_l2)));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>cargh,<sp/>sargh;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_ps(argh,<sp/>&amp;sargh,<sp/>&amp;cargh);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_ps(_mm_add_ps(ss2,vec_l2));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(vweights1,_mm_sub_ps(cargh,<sp/>cargz)),rcp_denom);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_ps(_mm_mul_ps(vweights1,_mm_sub_ps(sargh,<sp/>sargz)),rcp_denom);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_ps(intHreal,<sp/>real);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_ps(intHimag,<sp/>imag);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_mul_ps(intHreal,<sp/>_mm_mul_ps(_mm_mul_ps(vec_s_2,vec_l),<sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_mul_ps(intHimag,<sp/>_mm_mul_ps(_mm_mul_ps(vec_s_2,vec_l),<sp/>rcp_denom1));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_ps(intHreal,intWreal);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_ps(intHimag,intWimag);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>-i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>__m128<sp/>tmp<sp/>=<sp/>intHreal;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>intHimag;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_neg_ps(tmp);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>__m128<sp/>sign<sp/>=<sp/>_mm_mul_ps(s,l);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_mulsign_ps(intHreal,sign);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_mulsign_ps(intHimag,sign);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Horizontal<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>_mm_store_ss(&amp;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(&amp;)[2]</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(retval)[0]),_mm_dp_ps(_m_one_ps,intHreal,0xF1));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>_mm_store_ss(&amp;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(&amp;)[2]</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(retval)[1]),_mm_dp_ps(_m_one_ps,intHimag,0xF1));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Verify<sp/>what<sp/>happens<sp/>on<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">std::complex&lt;float&gt;</highlight></codeline>
<codeline lineno="329" refid="FnmSIMD_8hpp_1af714277fdda0c36cc35b950fc5178bc6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="FnmSIMD_8hpp_1a8c2f4b3432e306eb19be78d6e8636199" kindref="member">CalcHzFast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::element_t&lt;float&gt;&amp;<sp/>element,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;float&gt;&amp;<sp/>projection,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>k,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>us,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>uweights,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>vs,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>vweights,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>std::complex&lt;float&gt;<sp/>retval<sp/>=<sp/>std::complex&lt;float&gt;(0.0f,0.0f);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/><sp/>=<sp/>projection[0];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/><sp/>=<sp/>projection[1];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/><sp/>=<sp/>projection[2];</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hw<sp/>=<sp/>element.hw;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hh<sp/>=<sp/>element.hh;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_mk<sp/>=<sp/>_mm_set1_ps(-k);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_z<sp/><sp/>=<sp/>_mm_set1_ps(z);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>__m128<sp/>s_stop_in;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>__m128<sp/>l_stop_in;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>__m128<sp/>s_start_out;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>__m128<sp/>s_stop_out;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>__m128<sp/>l_start_out;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>__m128<sp/>l_stop_out;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_absx<sp/>=<sp/>_mm_set1_ps(fabs(x));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_absy<sp/>=<sp/>_mm_set1_ps(fabs(y));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_hw<sp/><sp/><sp/>=<sp/>_mm_set1_ps(hw);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_hh<sp/><sp/><sp/>=<sp/>_mm_set1_ps(hh);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>equally<sp/>bad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>absX<sp/>=<sp/>fabs(projection[0]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>absY<sp/>=<sp/>fabs(projection[1]);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s0<sp/>=<sp/>absX<sp/>+<sp/>hw;<sp/></highlight><highlight class="comment">//<sp/>[0;|x|+hw]<sp/>-&gt;<sp/>[0;hw+|x|]<sp/><sp/>-&gt;<sp/>[|x|;|x|+hw]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>hw<sp/>-<sp/>absX;<sp/></highlight><highlight class="comment">//<sp/>[0;hw-|x|]<sp/>-&gt;<sp/>-[hw-|x|;0]<sp/>-&gt;<sp/>[|x|-hw;|x|]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l0<sp/>=<sp/>absY<sp/>+<sp/>hh;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l2<sp/>=<sp/>hh<sp/>-<sp/>absY;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Negative<sp/>(maybe)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hw<sp/>+<sp/>(-1,1,-1,1)*absX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>s_stop_in<sp/>=<sp/>_mm_set_ps(s1,s0,s1,s0);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hh<sp/>+<sp/>(-1,-1,1,1)*absX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>l_stop_in<sp/>=<sp/>_mm_set_ps(l2,l2,l0,l0);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1_o<sp/>=<sp/>absX+hw;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s0_o<sp/>=<sp/>absX-hw;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l0_o<sp/>=<sp/>absY-hh;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l2_o<sp/>=<sp/>absY+hh;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>absX<sp/>+<sp/>(-1,0,-1,0)*hw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>s_start_out<sp/>=<sp/>_mm_set_ps(s0_o,<sp/>absX,<sp/>s0_o,<sp/>absX);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>absX<sp/>+<sp/>(0,1,0,1)*hw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>s_stop_out<sp/><sp/>=<sp/>_mm_set_ps(absX,<sp/>s1_o,<sp/>absX,<sp/>s1_o);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>absY<sp/>+<sp/>(-1,-1,0,0)*hh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>l_start_out<sp/>=<sp/>_mm_set_ps(l0_o,<sp/>l0_o,<sp/>absY,<sp/>absY);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>absY<sp/>+<sp/>(0,0,1,1)*hh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>l_stop_out<sp/><sp/>=<sp/>_mm_set_ps(absY,<sp/>absY,<sp/>l2_o,<sp/>l2_o);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_pmpm<sp/>=<sp/>_mm_set_ps(1.0f,-1.0f,1.0f,-1.0f);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_ppmm<sp/>=<sp/>_mm_set_ps(1.0f,1.0f,-1.0f,-1.0f);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_p0p0<sp/>=<sp/>_mm_set_ps(1.0f,0.0f,1.0f,0.0f);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_pp00<sp/>=<sp/>_mm_set_ps(1.0f,1.0f,0.0f,0.0f);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>s_stop_in<sp/><sp/><sp/>=<sp/>_mm_sub_ps(v_hw,_mm_mul_ps(v_pmpm,v_absx));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>l_stop_in<sp/><sp/><sp/>=<sp/>_mm_sub_ps(v_hh,_mm_mul_ps(v_ppmm,v_absy));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>s_start_out<sp/>=<sp/>_mm_sub_ps(v_absx,_mm_mul_ps(v_p0p0,v_hw));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>s_stop_out<sp/><sp/>=<sp/>_mm_add_ps(v_absx,_mm_mul_ps(_mm_sub_ps(_m_one_ps,v_p0p0),v_hw));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>l_start_out<sp/>=<sp/>_mm_sub_ps(v_absy,_mm_mul_ps(v_pp00,v_hh));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>l_stop_out<sp/><sp/>=<sp/>_mm_add_ps(v_absy,<sp/>_mm_mul_ps(_mm_sub_ps(_m_one_ps,v_pp00),v_hh));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Integral<sp/>(stop,<sp/>inside)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>__m128<sp/>start_in<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|x|<sp/>&gt;<sp/>hw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>__m128<sp/>mask<sp/>=<sp/>_mm_cmpgt_ps(v_absx,v_hw);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>__m128<sp/>s_start<sp/>=<sp/>_mm_sel_ps(start_in,<sp/>s_start_out,<sp/>mask);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>__m128<sp/>s_stop<sp/><sp/>=<sp/>_mm_sel_ps(s_stop_in,<sp/>s_stop_out,<sp/>mask);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|y|<sp/>&gt;<sp/>hh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>__m128<sp/>mask1<sp/><sp/><sp/>=<sp/>_mm_cmpgt_ps(v_absy,v_hh);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>__m128<sp/>l_start<sp/>=<sp/>_mm_sel_ps(start_in,<sp/>l_start_out,<sp/>mask1);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>__m128<sp/>l_stop<sp/><sp/>=<sp/>_mm_sel_ps(l_stop_in,<sp/>l_stop_out,<sp/>mask1);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>__m128<sp/>s<sp/>=<sp/>_mm_sub_ps(s_stop,<sp/>s_start);<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>__m128<sp/>l<sp/>=<sp/>_mm_sub_ps(l_stop,<sp/>l_start);<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>__m128<sp/>cargz,<sp/>sargz;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>_mm_sin_cos_ps(_mm_mul_ps(v_mk,v_z),&amp;sargz,&amp;cargz);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_z2<sp/>=<sp/>_mm_square_ps(v_z);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_l2<sp/>=<sp/>_mm_square_ps(l_stop_in);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>v_s2<sp/>=<sp/>_mm_square_ps(s_stop_in);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>__m128<sp/>rcp_denom1<sp/>=<sp/>_mm_rcp_ps(_mm_mul_ps(_m_2pi_ps,_mm_neg_ps(v_mk)));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>u-integral,<sp/>s-integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>s_offset<sp/>=<sp/>_mm_mul_ps(_m_half_ps,_mm_add_ps(s_stop,s_start));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>s_scale<sp/><sp/>=<sp/>_mm_mul_ps(_m_half_ps,_mm_sub_ps(s_stop,s_start));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v-integral,<sp/>l-integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>l_offset<sp/>=<sp/>_mm_mul_ps(_m_half_ps,_mm_add_ps(l_start,l_stop));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128<sp/>l_scale<sp/><sp/>=_mm_mul_ps(_m_half_ps,_mm_sub_ps(l_stop,l_start));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>__m128<sp/>intWreal<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>__m128<sp/>intWimag<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>__m128<sp/>real,<sp/>imag;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iu<sp/>=<sp/>0<sp/>;<sp/>iu<sp/>&lt;<sp/>nUs<sp/>;<sp/>iu++)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>us1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_ps(&amp;us[iu]);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>uweights1<sp/>=<sp/>_mm_load1_ps(&amp;uweights[iu]);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0<sp/>;<sp/>|x|+hw]<sp/>,<sp/>[0<sp/>;<sp/>hw<sp/>-<sp/>|x|];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ls<sp/><sp/>=<sp/>_mm_add_ps(_mm_mul_ps(s_scale,us1),s_offset);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ls2<sp/>=<sp/>_mm_square_ps(ls);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>argw<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_mk,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_ps(</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ls2,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_z2),</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_l2)));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>cargw,<sp/>sargw;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_ps(argw,<sp/>&amp;sargw,<sp/>&amp;cargw);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>denom<sp/>=<sp/>_mm_add_ps(ls2,v_l2);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_ps(denom);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>integral<sp/>has<sp/>zero<sp/>length,<sp/>reciprocal<sp/>of<sp/>denominator<sp/>is<sp/>set<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>mask_denom<sp/>=<sp/>_mm_cmplt_ps(_mm_fabs_ps(s_scale),_m_eps_ps);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>rcp_denom<sp/>=<sp/>_mm_sel_ps(rcp_denom,_mm_setzero_ps(),mask_denom);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uweights1,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_ps(</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargw,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargz)),</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uweights1,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_ps(</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargw,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargz)),</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>intWreal<sp/>=<sp/>_mm_add_ps(intWreal,<sp/>real);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>intWimag<sp/>=<sp/>_mm_add_ps(intWimag,<sp/>imag);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>__m128<sp/>intScale<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sel_ps(s_scale,_mm_mul_ps(s,_m_half_ps),mask),</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_stop_in),</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>intWreal<sp/>=<sp/>_mm_mul_ps(intWreal,intScale);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>intWimag<sp/>=<sp/>_mm_mul_ps(intWimag,intScale);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>(consider<sp/>recover<sp/>sign<sp/>earlier)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>__m128<sp/>intHreal<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>__m128<sp/>intHimag<sp/>=<sp/>_mm_setzero_ps();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0<sp/>;<sp/>iv<sp/>&lt;<sp/>nVs<sp/>;<sp/>iv++)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>vs1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_ps(&amp;vs[iv]);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>vweights1<sp/>=<sp/>_mm_load1_ps(&amp;vweights[iv]);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ss<sp/><sp/>=<sp/>_mm_add_ps(_mm_mul_ps(l_scale,vs1),l_offset);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>ss2<sp/>=<sp/>_mm_square_ps(ss);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>argh<sp/>=<sp/>_mm_mul_ps(v_mk,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_ps(</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_ps(</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss2,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_z2),</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_s2)));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>cargh,<sp/>sargh;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_ps(argh,<sp/>&amp;sargh,<sp/>&amp;cargh);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>denom<sp/>=<sp/>_mm_add_ps(ss2,v_s2);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_ps(denom);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>integral<sp/>has<sp/>zero<sp/>length,<sp/>reciprocal<sp/>of<sp/>denominator<sp/>is<sp/>set<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128<sp/>mask_denom<sp/>=<sp/>_mm_cmplt_ps(_mm_fabs_ps(l_scale),_m_eps_ps);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>rcp_denom<sp/>=<sp/>_mm_sel_ps(rcp_denom,_mm_setzero_ps(),mask_denom);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vweights1,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_ps(</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargh,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargz)),</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vweights1,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_ps(</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargh,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargz)),</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_ps(intHreal,<sp/>real);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_ps(intHimag,<sp/>imag);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>intScale<sp/>=<sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_ps(</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sel_ps(l_scale,_mm_mul_ps(_m_half_ps,l),mask1),</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_stop_in),</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_mul_ps(intHreal,intScale);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_mul_ps(intHimag,intScale);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_ps(intHreal,intWreal);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_ps(intHimag,intWimag);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>-i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>__m128<sp/>tmp<sp/>=<sp/>intHreal;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>intHimag;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_neg_ps(tmp);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Horizontal<sp/>sums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>_mm_store_ss(</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(&amp;)[2]</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(retval)[0]),</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_dp_ps(</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_m_one_ps,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intHreal,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xF1));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>_mm_store_ss(&amp;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(&amp;)[2]</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(retval)[1]),</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_dp_ps(</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_m_one_ps,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intHimag,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF1));</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Not<sp/>working!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">std::complex&lt;double&gt;</highlight></codeline>
<codeline lineno="597" refid="FnmSIMD_8hpp_1ad78992ef7c633408569afdc5bf9c1959" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="FnmSIMD_8hpp_1a8c2f4b3432e306eb19be78d6e8636199" kindref="member">CalcHzFast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::element_t&lt;double&gt;&amp;<sp/>element,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;double&gt;&amp;<sp/>projection,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>k,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>us,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>uweights,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vs,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vweights,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/>retval<sp/>=<sp/>std::complex&lt;double&gt;(0.0f,0.0f);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>absX<sp/>=<sp/>fabs(projection[0]);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>absY<sp/>=<sp/>fabs(projection[1]);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z<sp/><sp/><sp/><sp/>=<sp/>projection[2];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hw<sp/>=<sp/>element.hw;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hh<sp/>=<sp/>element.hh;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s0<sp/>=<sp/>absX<sp/>+<sp/>hw;<sp/></highlight><highlight class="comment">//<sp/>[0;|x|+hw]<sp/>-&gt;<sp/>[0;hw+|x|]<sp/><sp/>-&gt;<sp/>[|x|;|x|+hw]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>hw<sp/>-<sp/>absX;<sp/></highlight><highlight class="comment">//<sp/>[0;hw-|x|]<sp/>-&gt;<sp/>-[hw-|x|;0]<sp/>-&gt;<sp/>[|x|-hw;|x|]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l0<sp/>=<sp/>absY<sp/>+<sp/>hh;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l2<sp/>=<sp/>hh<sp/>-<sp/>absY;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Integral<sp/>(stop,<sp/>inside)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>__m128d<sp/>start_in<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128d<sp/>vec_mk<sp/>=<sp/>_mm_set1_pd(-k);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128d<sp/>vec_z<sp/><sp/>=<sp/>_mm_set1_pd(z);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>__m128d<sp/>s_stop_in<sp/>=<sp/>_mm_set_pd(s1,s0);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>__m128d<sp/>l_stop_in<sp/>=<sp/>_mm_set_pd(l2,l2);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>__m128d<sp/>s_start_out<sp/>=<sp/>_mm_set_pd(absX-hw,absX<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>__m128d<sp/>s_stop_out<sp/><sp/>=<sp/>_mm_set_pd(absX<sp/><sp/><sp/>,absX+hw);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>__m128d<sp/>l_start_out<sp/>=<sp/>_mm_set_pd(absY-hh,<sp/>absY-hh);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>__m128d<sp/>l_stop_out<sp/><sp/>=<sp/>_mm_set_pd(absY<sp/><sp/><sp/>,<sp/>absY<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|x|<sp/>&gt;<sp/>hw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>__m128d<sp/>mask<sp/>=<sp/>_mm_cmpgt_pd(_mm_fabs_pd(_mm_set1_pd(projection[0])),_mm_set1_pd(hw));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>__m128d<sp/>s_start<sp/>=<sp/>_mm_sel_pd(start_in,s_start_out,mask);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>__m128d<sp/>s_stop<sp/><sp/>=<sp/>_mm_sel_pd(s_stop_in,s_stop_out<sp/><sp/>,mask);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Okay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>__m128d<sp/>mask1<sp/>=<sp/>_mm_cmpgt_pd(_mm_fabs_pd(_mm_set1_pd(projection[1])),_mm_set1_pd(hh));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>__m128d<sp/>l_start<sp/>=<sp/>_mm_sel_pd(start_in,l_start_out,mask1);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>__m128d<sp/>l_stop<sp/><sp/>=<sp/>_mm_sel_pd(l_stop_in,<sp/>l_stop_out,<sp/>mask1);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>__m128d<sp/>s<sp/>=<sp/>_mm_sub_pd(s_stop,s_start);<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>__m128d<sp/>l<sp/>=<sp/>_mm_sub_pd(l_stop,l_start);<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>__m128d<sp/>cargz,<sp/>sargz;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>_mm_sin_cos_pd(_mm_mul_pd(vec_mk,vec_z),&amp;sargz,&amp;cargz);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__m128d<sp/>z2<sp/>=<sp/>_mm_square_pd(vec_z);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>__m128d<sp/>vec_l2<sp/><sp/><sp/>=<sp/>_mm_square_pd(l_stop_in);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>__m128d<sp/>vec_s2<sp/><sp/><sp/>=<sp/>_mm_square_pd(s_stop_in);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>__m128d<sp/>rcp_denom1<sp/>=<sp/>_mm_rcp_pd(_mm_mul_pd(_m_2pi_pd,_mm_set1_pd(k)));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>u-integral,<sp/>s-integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>__m128d<sp/>s_offset<sp/>=<sp/>_mm_mul_pd(_m_half_pd,_mm_add_pd(s_stop,s_start));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>__m128d<sp/>s_scale<sp/><sp/>=<sp/>_mm_mul_pd(_m_half_pd,_mm_sub_pd(s_stop,s_start));</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>__m128d<sp/>l_offset<sp/>=<sp/>_mm_mul_pd(_m_half_pd,_mm_add_pd(l_start,l_stop));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>__m128d<sp/>l_scale<sp/><sp/>=_mm_mul_pd(_m_half_pd,_mm_sub_pd(l_stop,l_start));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>__m128d<sp/>intWreal<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>__m128d<sp/>intWimag<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>__m128d<sp/>real,<sp/>imag;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iu<sp/>=<sp/>0<sp/>;<sp/>iu<sp/>&lt;<sp/>nUs<sp/>;<sp/>iu++)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>us1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_pd(&amp;us[iu]);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>uweights1<sp/>=<sp/>_mm_load1_pd(&amp;uweights[iu]);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0<sp/>;<sp/>|x|+hw]<sp/>,<sp/>[0<sp/>;<sp/>hw<sp/>-<sp/>|x|];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ls<sp/><sp/>=<sp/>_mm_add_pd(_mm_mul_pd(s_scale,us1),s_offset);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ls2<sp/>=<sp/>_mm_square_pd(ls);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>argw<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_mk,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_pd(</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ls2,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2),</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_l2)));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>cargw,<sp/>sargw;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_pd(argw,<sp/>&amp;sargw,<sp/>&amp;cargw);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_pd(_mm_add_pd(ls2,vec_l2));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>mask_denom<sp/>=<sp/>_mm_cmplt_pd(_mm_fabs_pd(s_scale),_m_eps_pd);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>rcp_denom<sp/>=<sp/>_mm_sel_pd(rcp_denom,_mm_setzero_pd(),mask_denom);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uweights1,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargw,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargz)),</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uweights1,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargw,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargz)),</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>intWreal<sp/>=<sp/>_mm_add_pd(intWreal,<sp/>real);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>intWimag<sp/>=<sp/>_mm_add_pd(intWimag,<sp/>imag);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>__m128d<sp/>intScale<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sel_pd(s_scale,s,mask),<sp/></highlight><highlight class="comment">//<sp/>Half<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_stop_in),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>intWreal<sp/>=<sp/>_mm_mul_pd(intWreal,intScale);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>intWimag<sp/>=<sp/>_mm_mul_pd(intWimag,intScale);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>(consider<sp/>recover<sp/>sign<sp/>earlier)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>__m128d<sp/>intHreal<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>__m128d<sp/>intHimag<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0<sp/>;<sp/>iv<sp/>&lt;<sp/>nVs<sp/>;<sp/>iv++)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>vs1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_pd(&amp;vs[iv]);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>vweights1<sp/>=<sp/>_mm_load1_pd(&amp;vweights[iv]);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ss<sp/><sp/>=<sp/>_mm_add_pd(_mm_mul_pd(l_scale,vs1),l_offset);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ss2<sp/>=<sp/>_mm_square_pd(ss);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>argh<sp/>=<sp/>_mm_mul_pd(vec_mk,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_pd(</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss2,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2),</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_s2)));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>cargh,<sp/>sargh;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_pd(argh,<sp/>&amp;sargh,<sp/>&amp;cargh);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_pd(_mm_add_pd(ss2,vec_s2));</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>mask_denom<sp/>=<sp/>_mm_cmplt_pd(_mm_fabs_pd(l_scale),_m_eps_pd);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>rcp_denom<sp/>=<sp/>_mm_sel_pd(rcp_denom,_mm_setzero_pd(),mask_denom);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vweights1,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargh,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargz)),</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vweights1,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargh,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargz)),</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_pd(intHreal,<sp/>real);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_pd(intHimag,<sp/>imag);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>intScale<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sel_pd(l_scale,l,mask1),<sp/></highlight><highlight class="comment">//<sp/>Half<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_stop_in),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inserts<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_mul_pd(intHreal,intScale);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_mul_pd(intHimag,intScale);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_pd(intHreal,intWreal);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_pd(intHimag,intWimag);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>-i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>__m128d<sp/>tmp<sp/>=<sp/>intHreal;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>intHimag;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_neg_pd(tmp);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Horizontal<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>ALIGN16_BEGIN<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmpd[2]<sp/>ALIGN16_END;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>_mm_store_pd(tmpd,_mm_dp_pd(_m_one_pd,intHreal,0xF1));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>retval.real(tmpd[0]);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>_mm_store_pd(tmpd,_mm_dp_pd(_m_one_pd,intHimag,0xF1));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>retval.imag(tmpd[0]);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>s_stop_in<sp/>=<sp/>_mm_set_pd(s1,s0);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>l_stop_in<sp/>=<sp/>_mm_set_pd(l0,l0);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>s_start_out<sp/>=<sp/>_mm_set_pd(absX-hw,absX);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>s_stop_out<sp/><sp/>=<sp/>_mm_set_pd(absX<sp/><sp/><sp/>,absX+hw);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>l_start_out<sp/>=<sp/>_mm_set_pd(absY<sp/><sp/><sp/>,<sp/>absY);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>l_stop_out<sp/><sp/>=<sp/>_mm_set_pd(absY+hh,<sp/>absY+hh);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|x|<sp/>&gt;<sp/>hw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>_mm_cmpgt_pd(_mm_fabs_pd(_mm_set1_pd(projection[0])),_mm_set1_pd(hw));</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>s_start<sp/>=<sp/>_mm_sel_pd(start_in,s_start_out,mask);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>s_stop<sp/><sp/>=<sp/>_mm_sel_pd(s_stop_in,s_stop_out<sp/><sp/>,mask);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Okay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>mask1<sp/>=<sp/>_mm_cmpgt_pd(_mm_fabs_pd(_mm_set1_pd(projection[1])),_mm_set1_pd(hh));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>l_start<sp/>=<sp/>_mm_sel_pd(start_in,l_start_out,mask1);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>l_stop<sp/><sp/>=<sp/>_mm_sel_pd(l_stop_in,<sp/>l_stop_out,<sp/>mask1);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>_mm_sub_pd(s_stop,s_start);<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>l<sp/>=<sp/>_mm_sub_pd(l_stop,l_start);<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>_mm_sin_cos_pd(_mm_mul_pd(vec_mk,vec_z),&amp;sargz,&amp;cargz);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>vec_l2<sp/>=<sp/>_mm_square_pd(l_stop_in);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>vec_s2<sp/>=<sp/>_mm_square_pd(s_stop_in);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>rcp_denom1<sp/>=<sp/>_mm_rcp_pd(_mm_mul_pd(_m_2pi_pd,_mm_set1_pd(k)));</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>u-integral,<sp/>s-integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>s_offset<sp/>=<sp/>_mm_mul_pd(_m_half_pd,_mm_add_pd(s_stop,s_start));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>s_scale<sp/><sp/>=<sp/>_mm_mul_pd(_m_half_pd,_mm_sub_pd(s_stop,s_start));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>l_offset<sp/>=<sp/>_mm_mul_pd(_m_half_pd,_mm_add_pd(l_start,l_stop));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>l_scale<sp/><sp/>=_mm_mul_pd(_m_half_pd,_mm_sub_pd(l_stop,l_start));</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>intWreal<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>intWimag<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iu<sp/>=<sp/>0<sp/>;<sp/>iu<sp/>&lt;<sp/>nUs<sp/>;<sp/>iu++)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>us1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_pd(&amp;us[iu]);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>uweights1<sp/>=<sp/>_mm_load1_pd(&amp;uweights[iu]);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0<sp/>;<sp/>|x|+hw]<sp/>,<sp/>[0<sp/>;<sp/>hw<sp/>-<sp/>|x|];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ls<sp/><sp/>=<sp/>_mm_add_pd(_mm_mul_pd(s_scale,us1),s_offset);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ls2<sp/>=<sp/>_mm_square_pd(ls);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>argw<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_mk,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_pd(</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ls2,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2),</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_l2)));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>cargw,<sp/>sargw;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_pd(argw,<sp/>&amp;sargw,<sp/>&amp;cargw);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_pd(_mm_add_pd(ls2,vec_l2));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uweights1,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargw,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargz)),</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uweights1,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargw,</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargz)),</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>intWreal<sp/>=<sp/>_mm_add_pd(intWreal,<sp/>real);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>intWimag<sp/>=<sp/>_mm_add_pd(intWimag,<sp/>imag);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>intScale<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sel_pd(s_scale,s,mask),<sp/></highlight><highlight class="comment">//<sp/>Half<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_stop_in),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>intWreal<sp/>=<sp/>_mm_mul_pd(intWreal,intScale);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>intWimag<sp/>=<sp/>_mm_mul_pd(intWimag,intScale);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>(consider<sp/>recover<sp/>sign<sp/>earlier)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_setzero_pd();</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0<sp/>;<sp/>iv<sp/>&lt;<sp/>nVs<sp/>;<sp/>iv++)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>vs1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_mm_load1_pd(&amp;vs[iv]);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>vweights1<sp/>=<sp/>_mm_load1_pd(&amp;vweights[iv]);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ss<sp/><sp/>=<sp/>_mm_add_pd(_mm_mul_pd(l_scale,vs1),l_offset);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>ss2<sp/>=<sp/>_mm_square_pd(ss);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>argh<sp/>=<sp/>_mm_mul_pd(vec_mk,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sqrt_pd(</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_add_pd(</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss2,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2),</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_s2)));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>cargh,<sp/>sargh;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>_mm_sin_cos_pd(argh,<sp/>&amp;sargh,<sp/>&amp;cargh);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>__m128d<sp/>rcp_denom<sp/>=<sp/>_mm_rcp_pd(_mm_add_pd(ss2,vec_s2));</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>real<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vweights1,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargh,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cargz)),</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>imag<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vweights1,</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sub_pd(</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargh,</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sargz)),</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_pd(intHreal,<sp/>real);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_pd(intHimag,<sp/>imag);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>intScale<sp/>=<sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_mul_pd(</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_sel_pd(l_scale,l,mask1),<sp/></highlight><highlight class="comment">//<sp/>Half<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_stop_in),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inserts<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcp_denom1);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>denominator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_mul_pd(intHreal,intScale);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_mul_pd(intHimag,intScale);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>_mm_add_pd(intHreal,intWreal);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_add_pd(intHimag,intWimag);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>-i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>intHreal;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>intHreal<sp/>=<sp/>intHimag;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>intHimag<sp/>=<sp/>_mm_neg_pd(tmp);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Horizontal<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>_mm_store_pd(tmpd,_mm_dp_pd(_m_one_pd,intHreal,0xF1));</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>retval.real(retval.real()<sp/>+<sp/>tmpd[0]);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>_mm_store_pd(tmpd,_mm_dp_pd(_m_one_pd,intHimag,0xF1));</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>retval.imag(retval.imag()<sp/>+<sp/>tmpd[0]);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="977"><highlight class="normal">std::complex&lt;double&gt;</highlight></codeline>
<codeline lineno="978" refid="FnmSIMD_8hpp_1a483b42c4d0c798ba9bde31c0be682edd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="FnmSIMD_8hpp_1aaf68820097524bc6a39eb9b5c95836e4" kindref="member">CalcHzVecGL</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>s,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>l,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>z,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>k,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>us,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>uweights,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vs,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vweights,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>SPS_UNREFERENCED_PARAMETERS(s,l,z,k,us,uweights,nUs,vs,vweights,nVs);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;();</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="994"><highlight class="normal">std::complex&lt;double&gt;</highlight></codeline>
<codeline lineno="995" refid="FnmSIMD_8hpp_1a703837733eadf893395370bc38b77060" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="FnmSIMD_8hpp_1a15656136d30b6df89250c4d3ed1c3914" kindref="member">CalcHzAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::element_t&lt;double&gt;&amp;<sp/>element,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sps::point_t&lt;double&gt;&amp;<sp/>projection,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>k,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>us,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>uweights,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nUs,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vs,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vweights,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nVs)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>SPS_UNREFERENCED_PARAMETERS(element,projection,k,us,uweights,nUs,vs,vweights,nVs);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>std::complex&lt;double&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>variables:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>indent-tabs-mode:<sp/>nil<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>tab-width:<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>c-basic-offset:<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/jmh/github/sofus/fnm/FnmSIMD.hpp"/>
  </compounddef>
</doxygen>
