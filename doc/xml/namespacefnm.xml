<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="namespacefnm" kind="namespace">
    <compoundname>fnm</compoundname>
    <innerclass refid="classfnm_1_1Aperture" prot="public">fnm::Aperture</innerclass>
    <innerclass refid="singletonfnm_1_1ApertureData" prot="public">fnm::ApertureData</innerclass>
    <innerclass refid="structfnm_1_1element__t" prot="public">fnm::element_t</innerclass>
    <innerclass refid="structfnm_1_1FocusingTypeNS" prot="public">fnm::FocusingTypeNS</innerclass>
    <innerclass refid="structfnm_1_1sysparm__t" prot="public">fnm::sysparm_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacefnm_1ac5c8ed1b3501db991ccb6065c89c3b54" prot="public" static="no">
        <type><ref refid="structfnm_1_1FocusingTypeNS_1a896c037a32087c5c20d97e64a1786880" kindref="member">FocusingTypeNS::Value</ref></type>
        <definition>typedef FocusingTypeNS::Value FocusingType</definition>
        <argsstring></argsstring>
        <name>FocusingType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/fnm_types.hpp" line="78" column="1" bodyfile="/home/jmh/github/sofus/fnm/fnm_types.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefnm_1a1486ec1da93598ab2d37b17cf9f62252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::complex&lt; T &gt;</type>
        <definition>std::complex&lt;T&gt; fnm::CalcHz</definition>
        <argsstring>(const T &amp;s, const T &amp;l, const T &amp;z, const T &amp;k, const T *uxs, const T *uweights, const size_t nUs, const T *vxs, const T *vweights, const size_t nVs)</argsstring>
        <name>CalcHz</name>
        <param>
          <type>const T &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>uxs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>uweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nUs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vxs</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vweights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nVs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Field above a corner of an element with dimensions <formula id="19">$s$</formula> and <formula id="20">$l$</formula> computed using Gauss-Legendre integration</para><para><formula id="21">\begin{eqnarray*}H_{s,l}(z;k) = - i/(2\pi k) ( &amp;s \int_0^l (exp(-ik\sqrt{\sigma^2+z^2+s^2}) - exp(-ikz)) / (\sigma^2+s^2) d\sigma + \\ &amp;l \int_0^s (exp(-ik\sqrt{\sigma^2+z^2+l^2}) - exp(-ikz)) / (\sigma^2+l^2) d\sigma) \end{eqnarray*}</formula></para><para>Reference implementation, see <ulink url="http://www.ncbi.nlm.nih.gov/pmc/articles/pmid/15139602/">Rapid calculations of time-harmonic nearfield pressures produced by rectangular pistons, J. McGough, 2004</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>width (x-dimension) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>height (y-dimension) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>distance to element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>wave-number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uxs</parametername>
</parameternamelist>
<parameterdescription>
<para>abcissa coordinates for x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uweights</parametername>
</parameternamelist>
<parameterdescription>
<para>weights for x-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nUs</parametername>
</parameternamelist>
<parameterdescription>
<para>number of x-coordinates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vxs</parametername>
</parameternamelist>
<parameterdescription>
<para>abcissa coordinates for y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vweights</parametername>
</parameternamelist>
<parameterdescription>
<para>weights for y-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nVs</parametername>
</parameternamelist>
<parameterdescription>
<para>number of y-coordinates</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Complex field value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/fnm_calc.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefnm_1a563d8aee788257300131ed9a7af75f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int fnm::CalcCwFieldRef</definition>
        <argsstring>(const ApertureData&lt; T &gt; &amp;data, const T *pos, const size_t nPositions, std::complex&lt; T &gt; **odata)</argsstring>
        <name>CalcCwFieldRef</name>
        <param>
          <type>const <ref refid="singletonfnm_1_1ApertureData" kindref="compound">ApertureData</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nPositions</declname>
        </param>
        <param>
          <type>std::complex&lt; T &gt; **</type>
          <declname>odata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spatial impulse response computed at the positions pos for a frequency f0. The frequency f0 as well as the positional information for the aperture is contained in the data structure. <verbatim>            ^
            |
      +-----+-----+-----------+ (x,y)
      |     |     |           |
      +-----+-----+-----------+
      |     |     |           |
      |     |     |           |
      |     |     |           |
      +     o-----+-----------+----&gt;
      |           |           |
  hh  |           |           |
      |           |           |
      +-----+-----+-----------+
              hw</verbatim></para><para>(Scalar reference implementation)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure holding element positions and f0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Positions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nPositions</parametername>
</parameternamelist>
<parameterdescription>
<para># of positions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odata</parametername>
</parameternamelist>
<parameterdescription>
<para>complex output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/fnm_calc.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefnm_1a262768119606bb7e361e68564ba88829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fnm::CalcCwField</definition>
        <argsstring>(const ApertureData&lt; T &gt; &amp;data, const T *pos, const size_t nPositions, std::complex&lt; T &gt; **odata)</argsstring>
        <name>CalcCwField</name>
        <param>
          <type>const <ref refid="singletonfnm_1_1ApertureData" kindref="compound">ApertureData</ref>&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nPositions</declname>
        </param>
        <param>
          <type>std::complex&lt; T &gt; **</type>
          <declname>odata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Naive integral, no re-use of parts and many abcissa are needed when projection is far away from rectangle</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nPositions</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>odata</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jmh/github/sofus/fnm/fnm_calc.hpp" line="100" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Fast Nearfield Method interfaces and implementations. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jmh/github/sofus/fnm/fnm.hpp" line="30" column="1"/>
  </compounddef>
</doxygen>
