include(CheckIncludeFile)
include(CheckFunctionExists)
include(GenerateExportHeader)

set(CMAKE_MODULE_PATH
  ${CMAKE_MODULE_PATH}
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake"
  )

# On POSIX compliant systems, we would like to support asynchronous execution
check_include_file(pthread.h HAVE_PTHREAD_H)
check_include_file(signal.h HAVE_SIGNAL_H)
check_function_exists(round HAVE_ROUND)

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
find_package(Threads REQUIRED)

if (Threads_FOUND)
  set(HAVE_THREAD 1)
endif()

add_definitions(-DDEBUG)

set(HAVE_CONFIG_H 1)

set (ACCURATE_TRIGONOMETRICS 0)
option (USE_Accurate_trigonometrics "Use scalar versions" OFF)
if (USE_Accurate_trigonometrics)
  set(ACCURATE_TRIGONOMETRICS 1)
else()
  set(ACCURATE_TRIGONOMETRICS 0)
endif()

# Verify (SPS_EXPORT -> FNM_EXPORT)

configure_file("${CMAKE_CURRENT_SOURCE_DIR}/config.h.in" "${CMAKE_CURRENT_BINARY_DIR}/config.h" @ONLY)

if (BUILD_SHARED_LIBS)
  add_definitions(-D_FNM_DYNAMIC_LINKING)
endif()

add_definitions(-DINLINE_VERTICES_CALCULATOR)

if(CMAKE_COMPILER_IS_GNUCXX)
  set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS} -fPIC -msse2 -msse3 -msse4 -mavx -pedantic -Wall")
elseif(MSVC)
  set(CMAKE_CXX_FLAGS "/Ox ${CMAKE_CXX_FLAGS}")
endif()

# Hack for Cygwin using FMA
if (CYGWIN)
  set(CMAKE_CXX_FLAGS "-mfma ${CMAKE_CXX_FLAGS}")
endif()

set(fnm_HEADERS
  FnmSIMD.hpp
  FnmMath.hpp
  fnm.hpp
  fnm_data.hpp
  fnm_export.h
  fastgl.hpp
#  gauss_legendre.h
  "${CMAKE_CURRENT_BINARY_DIR}/config.h"
)
set(fnm_SOURCES
  ../sps/smath.cpp
  fnm.cpp
  fnm_data.cpp
  fastgl.cpp
#  gauss_legendre.cpp
)

#if (UNIX AND NOT WIN32)
#  set(fnm_SOURCES "${fnm_SOURCES}" "../sps/strace.cpp")
#endif()

add_library(fnm ${LIB_TYPE} ${fnm_SOURCES} ${fnm_HEADERS} config.h.in)

generate_export_header(fnm)

set_target_properties(fnm PROPERTIES
  PUBLIC_HEADER "${fnm_HEADERS};${CMAKE_CURRENT_BINARY_DIR}/config.h;${CMAKE_CURRENT_BINARY_DIR}/fnm_export.h")


# SWIG Target

if (MSVC)
  add_definitions(-DSWIG_PYTHON_INTERPRETER_NO_DEBUG)
endif()

find_package(SWIG REQUIRED) #set(SWIG_EXECUTABLE /usr/bin/swig3.0)
include(${SWIG_USE_FILE})

find_package(PythonLibs REQUIRED)

include_directories(${PYTHON_INCLUDE_PATH})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_BINARY_DIR}) # config.h

if (CYGWIN)
  include_directories("/usr/include/numpy")
endif()

if (MSVC)
  set(CMAKE_SWIG_FLAGS "-D_SWIG_WIN32")
endif()

set_source_files_properties(swig_fnm.i PROPERTIES CPLUSPLUS ON)

set(swig_fnm_HEADERS
)

set(swig_fnm_SOURCES
)

swig_add_module(swig_fnm python swig_fnm.i ${swig_fnm_HEADERS} ${swig_fnm_SOURCES})

if (WIN32)
  string(REPLACE "_d" "" PYTHON_LIBRARIES "${PYTHON_LIBRARIES}")
endif()

swig_link_libraries(swig_fnm fnm ${PYTHON_LIBRARIES})

if (WIN32)
  # pyconfig.h is not autogenerated on Winblows. To avoid warnings, we
  # add a compiler directive
  get_directory_property(DirDefs COMPILE_DEFINITIONS )
  set_target_properties(_swig_fnm PROPERTIES
    COMPILE_DEFINITIONS "${DirDefs};HAVE_ROUND")
endif()

find_package(OpenMP REQUIRED)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")

include_directories(${GTEST_INCLUDE_DIR})

# Enable the test
find_package(PythonInterp)
         
install(TARGETS fnm
  # IMPORTANT: Add the fnm library to the "export-set"
  EXPORT FnmTargets
  RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
  ARCHIVE DESTINATION "${INSTALL_LIB_DIR}" COMPONENT lib
  LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
  PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}/fnm"
  COMPONENT dev)

# Copy dependencies
if (WIN32)
  if (1)
    set(SwigFnmOutputFiles
      swig_fnm.py
    )
    foreach(SwigFnmOutputFile ${SwigFnmOutputFiles})
      add_custom_command(TARGET _swig_fnm POST_BUILD
    	COMMAND ${CMAKE_COMMAND} -E copy_if_different
    	"${CMAKE_CURRENT_BINARY_DIR}/${SwigFnmOutputFile}"
    	"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIGURATION:fnm>")
    endforeach()
  endif()
endif()
